options
{
	JDK_VERSION = "1.7";
	static = false;
}

PARSER_BEGIN(RPLanguage)
import java.io.*;

public class RPLanguage
{
	public static void main(String args []) throws ParseException, FileNotFoundException
  	{
    	RPLanguage parser = new RPLanguage(new FileInputStream(new File("input/regole1.txt")));
    	parser.start();
  	}
}
PARSER_END(RPLanguage)

TOKEN_MGR_DECLS:
{
}

SKIP:{
  "\r"
| "\n"
| "\t"
| " "
| <"//"(~["\n","\r"])*("\n"|"\r") >								/*commento su singola linea*/}

/*LO SKIP DEL COMMENTO MULTILINEA AVVIENE MEDIANE PASSAGGIO DI STATO LESSICALE*/
SKIP:
{
  < "/*" > : IN_COMMENTO
}
<IN_COMMENTO>
SKIP:
{
  < "*/" >: DEFAULT
| < ~[] > 
}
/*----------------------------------------------------------------------------ESPRESSIONI REGOLARI*/

TOKEN:
{
  < #LETTERA: ["A"-"Z","a"-"z"] >										/*lettera*/

| < #CIFRA: ["0"-"9"] >													/*cifra*/

| < PV: ";" >															/*punto e virgola*/

| < EPS: "eps" >														/*epslon*/

| < PIPE: "|">															/*pipe*/

| < PUO_ESSERE: "::=" >							   						/*puo essere*/

| < LOOCKAHEAD: ("LOOCKAHEAD"|"loockahead")"("(<CIFRA>)+")" >			/*loockahead*/

| < OPZ_NON_TERM : "["<NON_TERM>"]">									/*non terminale opzionale*/

| < NON_TERM: "<"(~[													/*simbolo non terminali*/
					"\n","\r","\t","<",">","|"," ",":","=",				
					"[","]","/", ";","(",")","*","+","~",
					"\"","'","?","#",",","-"
				 ])+
			  ">" >														

| < OPZ_TERM : "["(<TERM>)+"]">											/*terminale opzionale*/

| < TERM: (~[															/*simbolo terminali*/
			"\n","\r","\t","<",">","|"," ",":","=",
			"[","]","/", ";","(",")","*","+","~",
			"\"","'","?","#",",","-"
		  ])+>

//| < COMMENTO_M: "/*"(~[])*"*/" >										/*commento multilinea*/
//| < OPZ : "["((<NON_TERM>|<TERM>)(" ")?(<NON_TERM>|<TERM>)?)+"]">     /*lista di terminali e non terminali opzionali*/										   								
}

/*----------------------------------------------------------------------------------------REGOLE DI PRODUZIONE*/
void start() :
{}
{
  { System.out.println("<start> ::= <grammatica>;");} grammatica() <EOF>
}

//<grammatica> ::= <regole>;
void grammatica():
{}
{
  {System.out.println("<grammatica> ::= <regole>;");} regole()
}

//<regole> ::= <regola> <regola_queue>;
//<regola_queue> ::= <regola> <regole> | eps;
void regole():
{}
{
  {System.out.println("<regole> ::= <regola> <regola_queue>;");} regola() regola_queue()
}

void regola_queue():
{}
{
  {System.out.println("<regola_queue> ::= <regole>;");} regole()
| {System.out.println("<regola_queue> ::= eps;");} {}
}

//<regola> ::= [LOOCKAHEAD] NON_TERM PUO_ESSERE <corpo> PV;
void regola():
{}
{
  {System.out.println("<regola> ::= LOOCKAHEAD NON_TERM PUO_ESSERE <corpo> PV;");} <LOOCKAHEAD> <NON_TERM> <PUO_ESSERE> corpo() <PV>
| {System.out.println("<regola> ::= NON_TERM PUO_ESSERE <corpo> PV;");} <NON_TERM> <PUO_ESSERE> corpo() <PV>
}

//<corpo> ::= <elementi> <elementi_queue>;
//<elementi_queue> ::= PIPE <corpo> | eps;
void corpo():
{}
{
  {System.out.println("<corpo> ::=  <elementi> <elementi_queue>;");} elementi() elementi_queue()
}

void elementi_queue():
{}
{
  {System.out.println("<elementi_queue> ::=  PIPE <corpo>;");} <PIPE> corpo()
| {System.out.println("<elementi_queue> ::= eps;");} {}
}

//<elementi> ::= <elemento> <elemento_queue>;
//<elemento_queue> ::= <elementi> | eps;
void elementi():
{}
{
  {System.out.println("<elementi> ::=  <elemento> <elemento_queue>;");} elemento() elemento_queue()
}

void elemento_queue():
{}
{
  {System.out.println("<elemento_queue> ::= <elementi>;");} elementi()
| {System.out.println("<elemento_queue> ::=  eps;");} {}
}

//<elemento> ::= TERM | NON_TERM | OPZ_TERM | OPZ_NON_TERM | eps;
void elemento():
{}
{
  {System.out.println("<elemento> ::=  TERM;");} <TERM>
| {System.out.println("<elemento> ::=  NON_TERM;");} <NON_TERM>
| {System.out.println("<elemento> ::=  OPZ_TERM;");} <OPZ_TERM>
| {System.out.println("<elemento> ::=  OPZ_NON_TERM;");} <OPZ_NON_TERM>
| {System.out.println("<elemento> ::=  EPS;");} <EPS>
}
